{"version":3,"sources":["components/users/User.js","components/users/UserInput.js","actions/index.js","containers/UsersContainer.js","containers/ItemsContainer.js","App.js","serviceWorker.js","reducers/index.js","reducers/usersReducer.js","reducers/itemsReducer.js","reducers/storesReducer.js","index.js"],"names":["User","props","user","name","UserInput","state","handleChange","event","setState","target","value","handleSubmit","preventDefault","addUser","handleSelect","loginUser","className","onSelect","this","users","all","map","key","id","onSubmit","type","onChange","Component","apiURL","fetchItems","dispatch","fetch","then","resp","json","items","fetchUsers","UsersContainer","undefined","current","connect","userId","addToCart","itemId","item","ItemsContainer","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","loading","action","store","stores","createStore","applyMiddleware","thunk","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d020e4f.chunk.js","sourcesContent":["import React from 'react'\n\nconst User = props => {\n\treturn (\n\t\t<h4>{props.user.name}</h4>\n\t)\n}\n\nexport default User","import React, { Component } from 'react'\n\nclass UserInput extends Component {\n\n\tstate = {\n\t\tname: ''\n\t}\n\n\thandleChange = event => {\n\t\tthis.setState({\n\t\t\tname: event.target.value\n\t\t})\n\t}\n\n\thandleSubmit = event => {\n\t\tevent.preventDefault()\n\t\tthis.props.addUser(this.state.name)\n\t}\n\n\thandleSelect = event => {\n\t\tthis.props.loginUser(event.target.value)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='UserInput'>\n\t\t\t\t<select name='users' onSelect={this.handleSelect}>\n\t\t\t\t\t<option value=''></option>\n\t\t\t\t\t{this.props.users.all.map(user => <option key={user.id} value={user.id}>{user.name}</option>)}\n\t\t\t\t</select>\n\t\t\t\t<form onSubmit={this.handleSubmit} >\n\t\t\t\t\t<input type='text' name='name' onChange={this.handleChange} value={this.state.name} />\n\t\t\t\t\t<input type='submit' />\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default UserInput","const apiURL = 'http://localhost:3001'\n\nconst configObj = (action, info) => {\n\treturn {\n\t\tmethod: action,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Accept': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(info)\n\t}\n}\n\nexport const fetchItems = () => {\n\treturn dispatch => {\n\t\tdispatch({type: 'LOADING_ITEMS'})\n\t\tfetch(`${apiURL}/items`)\n\t\t.then(resp => resp.json())\n\t\t.then(items => dispatch({ type: 'ADD_ITEMS', items }))\n\t}\n}\n\nexport const addItem = (name, content, price, storeId) => {\n\treturn dispatch => {\n\t\tfetch(`${apiURL}/stores/${storeId}/items`, configObj('POST', { name, content, price }))\n\t\t.then(resp => resp.json())\n\t\t.then(item => dispatch({ type: 'CREATE_ITEM', item }))\n\t}\n\n}\n\nexport const fetchStores = () => {\n\treturn dispatch => {\n\t\tdispatch({type: 'LOADING_STORES'})\n\t\tfetch(`${apiURL}/stores`)\n\t\t.then(resp => resp.json())\n\t\t.then(stores => dispatch({ type: 'ADD_STORES', stores }))\n\t}\n}\n\nexport const fetchUsers = () => {\n\treturn dispatch => {\n\t\tdispatch({type: 'LOADING_USERS'})\n\t\tfetch(`${apiURL}/users`)\n\t\t.then(resp => resp.json())\n\t\t.then(users => dispatch({ type: 'ADD_USERS', users }))\n\t}\n}\n\nexport const loginUser = userId => {\n\treturn dispatch => {\n\t\tdispatch({type: 'LOADING_USER', userId})\n\t\tfetch(`${apiURL}/user/${userId}`)\n\t\t.then(resp => resp.json())\n\t\t.then(user => dispatch({ type: 'LOGIN_USER', user }))\n\t}\n}\n\nexport const addToCart = (userId, itemId) => {\n\treturn dispatch => {\n\t\tfetch(`${apiURL}/user/${userId}/items/${itemId}`)\n\t\t.then(resp => resp.json)\n\t\t.then(item => dispatch({ type: 'CART_ITEM', item}))\n\t}\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport User from '../components/users/User'\nimport UserInput from '../components/users/UserInput'\nimport { fetchUsers, loginUser, addToCart } from '../actions/index'\n\nclass UsersContainer extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.fetchUsers()\n\t}\n\n\trender() {\n\t\tif (this.props.users.current.name !== undefined) {\n\t\t\treturn (\n\t\t\t\t<User user={this.props.users.current} />\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<UserInput users={this.props.users} loginUser={this.props.loginUser} />\n\t\t\t)\n\t\t}\n\t}\n\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tusers: state.users\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tfetchUsers,\n\t\tloginUser: userId => dispatch(loginUser(userId)),\n\t\taddToCart: (userId, itemId) => dispatch(addToCart(userId, itemId))\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchItems } from '../actions/index'\n\nclass ItemsContainer extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.fetchItems()\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='ItemsContainer'>\n\t\t\t\t\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\titems: state.items\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tfetchItems\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemsContainer)","import React from 'react';\nimport UsersContainer from './containers/UsersContainer'\nimport ItemsContainer from './containers/ItemsContainer'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<h1>Amazune.net</h1>\n\t\t\t\t<UsersContainer />\n\t\t\t</header>\n\t\t\t<ItemsContainer />\n\t\t</div>\n\t);\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\nimport usersReducer from './usersReducer'\nimport itemsReducer from './itemsReducer'\nimport storesReducer from './storesReducer'\n\nconst rootReducer = combineReducers({\n\tusers: usersReducer,\n\titems: itemsReducer,\n\tstore: storesReducer\n})\n\nexport default rootReducer","export default function usersReducer(state = {all: [], current: {}, loading: false}, action) {\n\n\tswitch (action.type) {\n\t\tcase 'LOADING_USERS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tall: [...state.all],\n\t\t\t\tloading: true\n\t\t\t}\n\t\tcase 'ADD_USERS':\n\t\t\tdebugger\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tall: action.users,\n\t\t\t\tloading: false\n\t\t\t}\n\t\tcase 'LOGIN_USER':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrent: action.user\n\t\t\t}\n\t\tcase 'CART_ITEM':\n\t\t\treturn state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}","export default function rootReducer(state = {all: [], loading: false}, action) {\n\n\tswitch (action.type) {\n\t\tcase 'LOADING_ITEMS':\n\t\t\treturn {\n\t\t\t\tall: [...state.all],\n\t\t\t\tloading: true\n\t\t\t}\n\t\tcase 'ADD_ITEMS':\n\t\t\treturn {\n\t\t\t\tall: action.items,\n\t\t\t\tloading: false\n\t\t\t}\n\t\tcase 'CREATE_ITEM':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tall: [...state.all, action.item]\n\t\t\t}\n\t\tcase 'DELETE_ITEM':\n\t\t\treturn state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}","export default function storesReducer(state = {all: [], loading: false}, action) {\n\n\tswitch (action.type) {\n\t\tcase 'LOADING_STORES':\n\t\t\treturn {\n\t\t\t\tall: [...state.all],\n\t\t\t\tloading: true\n\t\t\t}\n\t\tcase 'ADD_STORES':\n\t\t\treturn {\n\t\t\t\tall: action.stores,\n\t\t\t\tloading: false\n\t\t\t}\n\t\tcase 'DELETE_STORE':\n\t\t\treturn state\n\t\tdefault:\n\t\t\treturn state\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers/index'\n\nlet store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<Router>\n\t\t\t<Route path='/' component={App} />\n\t\t</Router>\n\t</Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}